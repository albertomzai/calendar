{
  "api_contract": {
    "ruta": "/api/events",
    "metodo": "GET, POST",
    "descripcion": "Gestión de eventos del calendario.",
    "parametros_entrada_GET": {
      "start": "string (ISO 8601 datetime)",
      "end": "string (ISO 8601 datetime)"
    },
    "respuesta_GET": [
      {
        "id": "integer",
        "titulo": "string",
        "descripcion": "string",
        "fecha_inicio": "string (ISO 8601 datetime)",
        "fecha_fin": "string (ISO 8601 datetime)",
        "color": "string"
      }
    ],
    "parametros_entrada_POST": {
      "titulo": "string",
      "descripcion": "string",
      "fecha_inicio": "string (ISO 8601 datetime)",
      "fecha_fin": "string (ISO 8601 datetime)",
      "color": "string"
    },
    "respuesta_POST": {
      "id": "integer",
      "titulo": "string",
      "descripcion": "string",
      "fecha_inicio": "string (ISO 8601 datetime)",
      "fecha_fin": "string (ISO 8601 datetime)",
      "color": "string"
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear el paquete `backend/` con un fichero `__init__.py` que defina la factory `create_app`.",
        "Configurar en `create_app` la extensión Flask-SQLAlchemy y apuntar a 'sqlite:///calendario.db'.",
        "Definir el modelo SQLAlchemy `Evento` dentro de `models.py` según el esquema proporcionado.",
        "Crear un Blueprint llamado `events_bp` en `routes.py` para manejar las rutas '/api/events' y '/api/events/<int:id>'.",
        "Implementar la lógica GET que recibe los parámetros `start` y `end`, filtra por rango de fechas y devuelve la lista de eventos serializada.",
        "Implementar la lógica POST que valida el cuerpo JSON, crea un nuevo registro en la base de datos y devuelve el evento creado con su ID.",
        "Implementar la lógica PUT que actualiza los campos del evento existente (incluyendo fecha_inicio/fecha_fin) según el payload recibido.",
        "Implementar la lógica DELETE que elimina el evento identificado por `id` y devuelve un mensaje de éxito.",
        "Agregar manejo de excepciones para errores 404, 400 y 500 con respuestas JSON adecuadas.",
        "Crear `requirements.txt` con 'Flask', 'Flask-SQLAlchemy' y 'pytest'.",
        "Escribir pruebas unitarias en `tests/test_backend.py` usando el test client de Flask para cada endpoint (GET, POST, PUT, DELETE).",
        "Configurar la aplicación para servir archivos estáticos desde '../frontend' mediante `app.static_folder`.",
        "Crear el archivo `app.py` en la raíz que importe y ejecute la factory `create_app`."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el directorio `frontend/` y dentro un único archivo `index.html` con estructura básica.",
        "Incluir una referencia a una librería de calendario JavaScript (por ejemplo, FullCalendar) mediante CDN en el `<head>`.",
        "Implementar el contenedor del calendario mensual con los estilos necesarios.",
        "Agregar un script inline que, al cargar la página, calcule el rango del mes actual y realice una llamada fetch GET a '/api/events' con `start` y `end` correspondientes.",
        "Procesar la respuesta JSON y renderizar cada evento dentro de su día correspondiente en el calendario.",
        "Añadir un manejador de clic sobre días vacíos que abra un formulario modal para crear un nuevo evento (capturando título, descripción, fechas y color).",
        "Enviar los datos del formulario mediante fetch POST a '/api/events' y actualizar el calendario sin recargar la página.",
        "Permitir que cada evento mostrado sea clicable; al hacer clic mostrar sus detalles y un botón de eliminación que envíe una solicitud DELETE a '/api/events/<id>' y remueva el evento del DOM.",
        "Implementar drag‑and‑drop en los eventos usando las capacidades de la librería seleccionada, actualizando `fecha_inicio` y `fecha_fin` con una llamada PUT a la API cuando se suelte un evento en otro día.",
        "Incluir manejo básico de errores HTTP en el frontend para mostrar mensajes al usuario si la API falla."
      ]
    }
  ]
}