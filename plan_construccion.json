{
  "api_contract": {
    "ruta": "/api/events",
    "metodo_GET": {
      "descripcion": "Obtiene todos los eventos dentro de un rango de fechas.",
      "parametros_entrada": {
        "start": "string (ISO 8601 datetime)",
        "end": "string (ISO 8601 datetime)"
      },
      "respuesta_esperada": [
        {
          "id": "integer",
          "titulo": "string",
          "descripcion": "string",
          "fecha_inicio": "string (ISO 8601 datetime)",
          "fecha_fin": "string (ISO 8601 datetime)",
          "color": "string"
        }
      ]
    },
    "metodo_POST": {
      "descripcion": "Crea un nuevo evento.",
      "parametros_entrada": {
        "titulo": "string",
        "descripcion": "string",
        "fecha_inicio": "string (ISO 8601 datetime)",
        "fecha_fin": "string (ISO 8601 datetime)",
        "color": "string"
      },
      "respuesta_esperada": {
        "id": "integer",
        "titulo": "string",
        "descripcion": "string",
        "fecha_inicio": "string (ISO 8601 datetime)",
        "fecha_fin": "string (ISO 8601 datetime)",
        "color": "string"
      }
    },
    "metodo_PUT": {
      "ruta_id": "/api/events/<id>",
      "descripcion": "Actualiza un evento existente.",
      "parametros_entrada": {
        "titulo": "string",
        "descripcion": "string",
        "fecha_inicio": "string (ISO 8601 datetime)",
        "fecha_fin": "string (ISO 8601 datetime)",
        "color": "string"
      },
      "respuesta_esperada": {
        "id": "integer",
        "titulo": "string",
        "descripcion": "string",
        "fecha_inicio": "string (ISO 8601 datetime)",
        "fecha_fin": "string (ISO 8601 datetime)",
        "color": "string"
      }
    },
    "metodo_DELETE": {
      "ruta_id": "/api/events/<id>",
      "descripcion": "Elimina un evento.",
      "respuesta_esperada": {
        "message": "string",
        "deleted_id": "integer"
      }
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear la estructura de directorios del proyecto Flask con subdirectorios 'app', 'models' y 'routes'.",
        "Configurar el archivo 'config.py' para usar SQLite con nombre 'calendario.db' y habilitar SQLAlchemy.",
        "Definir la clase modelo 'Evento' en 'models/evento.py' con atributos id, titulo, descripcion, fecha_inicio, fecha_fin y color, usando Flask-SQLAlchemy.",
        "Inicializar el objeto SQLAlchemy en 'app/__init__.py' y crear las tablas mediante un script de migración simple.",
        "Implementar la ruta GET '/api/events' en 'routes/eventos.py', aceptando parámetros 'start' y 'end', filtrando eventos por rango y devolviendo JSON con lista de objetos evento según el contrato.",
        "Crear la ruta POST '/api/events' que reciba un cuerpo JSON, valide los campos requeridos, cree una instancia Evento, guarde en la base y devuelva el objeto creado como JSON.",
        "Desarrollar la ruta PUT '/api/events/<id>' para actualizar los atributos de un evento existente; validar existencia, aplicar cambios y retornar el objeto actualizado.",
        "Implementar la ruta DELETE '/api/events/<id>' que elimine el registro correspondiente y retorne un mensaje de éxito con el id eliminado.",
        "Configurar CORS en Flask para permitir peticiones desde el frontend alojado localmente.",
        "Agregar manejo de errores global (400, 404, 500) con respuestas JSON estructuradas según el contrato.",
        "Escribir pruebas unitarias básicas usando pytest para cada endpoint y validar los códigos de estado y la estructura de respuesta."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo 'index.html' con una etiqueta <div id='calendar'></div> como contenedor del calendario.",
        "Incluir en 'index.html' los enlaces a la librería de calendario JavaScript seleccionada (por ejemplo, FullCalendar) y su hoja de estilos CSS.",
        "Escribir un bloque <script> inline que inicialice el calendario mensual al cargar la página, configurando la vista por mes y habilitando eventos dinámicos.",
        "Implementar una función JavaScript que realice una llamada fetch GET a '/api/events' con parámetros 'start' y 'end' correspondientes al primer y último día del mes actual; procesar la respuesta y renderizar los eventos en el calendario.",
        "Agregar un controlador de clic en las celdas del calendario para abrir un modal o formulario inline que permita ingresar título, descripción, fecha_inicio, fecha_fin y color, enviando una petición POST a '/api/events' al confirmar.",
        "Configurar cada evento renderizado para ser clickable; al hacer clic mostrar sus detalles y ofrecer un botón de eliminación que envíe DELETE a '/api/events/<id>'.",
        "Implementar la funcionalidad drag-and-drop del calendario: cuando un usuario arrastre un evento a otro día, capturar el nuevo rango de fechas y enviar una petición PUT a '/api/events/<id>' con las nuevas fechas.",
        "Añadir manejo básico de errores en todas las peticiones fetch, mostrando mensajes de alerta al usuario si la API falla.",
        "Optimizar la carga del calendario para que solo recupere eventos dentro del mes visible usando los parámetros 'start' y 'end'.",
        "Incluir estilos CSS mínimos dentro de <style> para asegurar una presentación clara del calendario y sus eventos sin depender de archivos externos."
      ]
    }
  ]
}