{
  "api_contract": {
    "ruta": "/api/events",
    "metodo": "GET",
    "descripcion": "Obtiene eventos dentro de un rango de fechas.",
    "parametros_entrada": {
      "start": "string (ISO 8601 datetime)",
      "end": "string (ISO 8601 datetime)"
    },
    "respuesta_esperada": [
      {
        "id": "integer",
        "titulo": "string",
        "descripcion": "string",
        "fecha_inicio": "string (ISO 8601 datetime)",
        "fecha_fin": "string (ISO 8601 datetime)",
        "color": "string"
      }
    ]
  },
  "api_contract_post": {
    "ruta": "/api/events",
    "metodo": "POST",
    "descripcion": "Crea un nuevo evento.",
    "parametros_entrada": {
      "titulo": "string",
      "fecha_inicio": "string (ISO 8601 datetime)",
      "fecha_fin": "string (ISO 8601 datetime)",
      "descripcion": "string",
      "color": "string"
    },
    "respuesta_esperada": {
      "id": "integer",
      "titulo": "string",
      "descripcion": "string",
      "fecha_inicio": "string (ISO 8601 datetime)",
      "fecha_fin": "string (ISO 8601 datetime)",
      "color": "string"
    }
  },
  "api_contract_put": {
    "ruta": "/api/events/<id>",
    "metodo": "PUT",
    "descripcion": "Actualiza un evento existente.",
    "parametros_entrada": {
      "titulo": "string",
      "fecha_inicio": "string (ISO 8601 datetime)",
      "fecha_fin": "string (ISO 8601 datetime)",
      "descripcion": "string",
      "color": "string"
    },
    "respuesta_esperada": {
      "id": "integer",
      "titulo": "string",
      "descripcion": "string",
      "fecha_inicio": "string (ISO 8601 datetime)",
      "fecha_fin": "string (ISO 8601 datetime)",
      "color": "string"
    }
  },
  "api_contract_delete": {
    "ruta": "/api/events/<id>",
    "metodo": "DELETE",
    "descripcion": "Elimina un evento.",
    "parametros_entrada": null,
    "respuesta_esperada": {
      "message": "string"
    }
  },
  "contrato_qa_e2e": {
    "calendar_view": "calendar-view",
    "day_cell": "day-cell",
    "event_item": "event-item",
    "create_event_button": "btn-create-event",
    "delete_event_button": "btn-delete-event",
    "modal_title_input": "input-title",
    "modal_start_input": "input-start",
    "modal_end_input": "input-end",
    "modal_save_button": "btn-save"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear el paquete 'backend' con '__init__.py' que configure Flask y SQLAlchemy.",
        "Definir la configuración de la base de datos SQLite ('calendario.db') en 'config.py'.",
        "Implementar el modelo SQLAlchemy 'Evento' según el esquema proporcionado.",
        "Crear un Blueprint 'events_bp' en 'routes.py' para manejar los endpoints REST.",
        "Desarrollar la lógica del endpoint GET '/api/events' con filtros de fecha y serialización JSON.",
        "Desarrollar la lógica del endpoint POST '/api/events' con validación de campos requeridos.",
        "Desarrollar la lógica del endpoint PUT '/api/events/<id>' para actualizar eventos existentes.",
        "Desarrollar la lógica del endpoint DELETE '/api/events/<id>' para eliminar eventos.",
        "Agregar manejo de errores y respuestas HTTP adecuadas (404, 400).",
        "Crear el script 'app.py' que inicialice la aplicación Flask con los Blueprints registrados.",
        "Escribir pruebas unitarias en 'tests/test_backend.py' usando pytest y Flask test client.",
        "Generar un archivo 'requirements.txt' con dependencias: Flask, Flask-SQLAlchemy, pytest."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo 'frontend/index.html' con estructura básica de HTML5.",
        "Incluir una referencia a la librería JavaScript de calendario (p.ej., FullCalendar).",
        "Agregar un contenedor con id 'calendar-view' para renderizar el calendario mensual.",
        "Implementar script inline que inicialice el calendario y solicite eventos del backend usando fetch GET.",
        "Configurar eventos click en celdas del calendario para abrir un modal de creación con inputs vinculados a los datos del contrato e2e.",
        "Agregar lógica para enviar POST al crear evento y PUT cuando se arrastre evento a otro día.",
        "Incluir botón dentro del detalle de evento que envíe DELETE al backend.",
        "Añadir atributos 'data-testid' según el contrato_qa_e2e para cada elemento interactivo."
      ]
    },
    {
      "etapa": "e2e",
      "tareas": [
        "Crear carpeta 'cypress/e2e' y archivo 'calendar.cy.js'.",
        "Escribir prueba que navegue a '/' y verifique la presencia del calendario.",
        "Simular clic en un día, completar formulario de evento y guardar; verificar aparición en calendario.",
        "Mover evento con drag-and-drop y validar actualización mediante PUT al backend.",
        "Eliminar evento y confirmar desaparición del calendario."
      ]
    }
  ]
}