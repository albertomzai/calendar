{
  "api_contract": {
    "ruta": "/api/events",
    "metodo_GET": {
      "descripcion": "Obtiene una lista de eventos filtrados por rango de fechas.",
      "parametros_entrada": {
        "start": "string (ISO 8601 datetime)",
        "end": "string (ISO 8601 datetime)"
      },
      "respuesta_esperada": [
        {
          "id": "integer",
          "titulo": "string",
          "descripcion": "string",
          "fecha_inicio": "string (ISO 8601 datetime)",
          "fecha_fin": "string (ISO 8601 datetime)",
          "color": "string"
        }
      ]
    },
    "metodo_POST": {
      "descripcion": "Crea un nuevo evento.",
      "parametros_entrada": {
        "titulo": "string",
        "descripcion": "string",
        "fecha_inicio": "string (ISO 8601 datetime)",
        "fecha_fin": "string (ISO 8601 datetime)",
        "color": "string"
      },
      "respuesta_esperada": {
        "id": "integer",
        "titulo": "string",
        "descripcion": "string",
        "fecha_inicio": "string (ISO 8601 datetime)",
        "fecha_fin": "string (ISO 8601 datetime)",
        "color": "string"
      }
    },
    "metodo_PUT_id": {
      "ruta": "/api/events/<id>",
      "descripcion": "Actualiza los campos de un evento existente.",
      "parametros_entrada": {
        "titulo": "string",
        "descripcion": "string",
        "fecha_inicio": "string (ISO 8601 datetime)",
        "fecha_fin": "string (ISO 8601 datetime)",
        "color": "string"
      },
      "respuesta_esperada": {
        "id": "integer",
        "titulo": "string",
        "descripcion": "string",
        "fecha_inicio": "string (ISO 8601 datetime)",
        "fecha_fin": "string (ISO 8601 datetime)",
        "color": "string"
      }
    },
    "metodo_DELETE_id": {
      "ruta": "/api/events/<id>",
      "descripcion": "Elimina un evento.",
      "respuesta_esperada": {
        "message": "string"
      }
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear la estructura de directorios base para el backend con Flask y Flask‑SQLAlchemy.",
        "Definir el modelo SQLAlchemy `Event` siguiendo el esquema del contexto.",
        "Configurar la conexión SQLite a 'calendario.db' en la aplicación Flask.",
        "Implementar un Blueprint `/api/events` con los endpoints GET, POST, PUT y DELETE según el contrato API.",
        "Agregar lógica de filtrado por rango de fechas en el endpoint GET usando parámetros `start` y `end`.",
        "Validar los datos entrantes para cada método POST/PUT y manejar errores de formato o de negocio.",
        "Devolver respuestas JSON con los campos especificados en el contrato API.",
        "Crear un archivo `requirements.txt` que incluya 'Flask' y 'Flask-SQLAlchemy'.",
        "Escribir pruebas unitarias con Pytest para cada endpoint, usando el test client de Flask.",
        "Configurar la aplicación factory `create_app` en `backend/__init__.py` y servir los archivos estáticos desde '../frontend'.",
        "Incluir un script `app.py` que importe `create_app` y lance la app cuando se ejecute directamente."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo único `frontend/index.html` con estructura básica de HTML5.",
        "Integrar una librería ligera de calendario JavaScript (por ejemplo, FullCalendar o similar) en el `<head>` mediante CDN.",
        "Escribir CSS inline o enlazar un pequeño stylesheet para estilizar la vista mensual y los eventos.",
        "Implementar un script JavaScript que al cargar obtenga la fecha actual y realice una llamada `fetch` al endpoint GET `/api/events` con parámetros `start` y `end` del mes actual.",
        "Renderizar los eventos recibidos en el calendario como marcadores o bloques de color según el campo `color`.",
        "Agregar un manejador de clic en cada día vacío que abra un formulario modal para crear un nuevo evento, enviando una solicitud POST al backend con datos capturados.",
        "Permitir la visualización de detalles y eliminación de eventos mediante clics sobre los mismos, realizando llamadas GET (para detalle) y DELETE respectivamente.",
        "Implementar drag‑and‑drop en el calendario; al soltar un evento en otro día, enviar una petición PUT actualizando las fechas `fecha_inicio` y `fecha_fin` del evento.",
        "Incluir manejo de errores básico que muestre mensajes amigables cuando la API responda con error o falle la conexión."
      ]
    }
  ]
}