{
  "api_contract": {
    "ruta": "/api/events",
    "metodos": [
      {
        "metodo": "GET",
        "descripcion": "Obtiene todos los eventos filtrados por rango de fechas.",
        "parametros_entrada": {
          "start": "string (ISO 8601 datetime)",
          "end": "string (ISO 8601 datetime)"
        },
        "respuesta_esperada": [
          {
            "id": "integer",
            "titulo": "string",
            "descripcion": "string",
            "fecha_inicio": "string (ISO 8601 datetime)",
            "fecha_fin": "string (ISO 8601 datetime)",
            "color": "string"
          }
        ]
      },
      {
        "metodo": "POST",
        "descripcion": "Crea un nuevo evento.",
        "parametros_entrada": {
          "titulo": "string",
          "descripcion": "string",
          "fecha_inicio": "string (ISO 8601 datetime)",
          "fecha_fin": "string (ISO 8601 datetime)",
          "color": "string"
        },
        "respuesta_esperada": {
          "id": "integer",
          "titulo": "string",
          "descripcion": "string",
          "fecha_inicio": "string (ISO 8601 datetime)",
          "fecha_fin": "string (ISO 8601 datetime)",
          "color": "string"
        }
      },
      {
        "metodo": "PUT",
        "ruta_adicional": "/<id>",
        "descripcion": "Actualiza los campos de un evento existente.",
        "parametros_entrada": {
          "titulo": "string",
          "descripcion": "string",
          "fecha_inicio": "string (ISO 8601 datetime)",
          "fecha_fin": "string (ISO 8601 datetime)",
          "color": "string"
        },
        "respuesta_esperada": {
          "id": "integer",
          "titulo": "string",
          "descripcion": "string",
          "fecha_inicio": "string (ISO 8601 datetime)",
          "fecha_fin": "string (ISO 8601 datetime)",
          "color": "string"
        }
      },
      {
        "metodo": "DELETE",
        "ruta_adicional": "/<id>",
        "descripcion": "Elimina un evento por su identificador.",
        "respuesta_esperada": {
          "message": "string"
        }
      }
    ]
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear la estructura de directorios del proyecto Flask con carpetas para app, models y routes.",
        "Instalar y configurar Flask-SQLAlchemy para usar SQLite como 'calendario.db'.",
        "Definir el modelo SQLAlchemy 'Evento' con los campos id, titulo, descripcion, fecha_inicio, fecha_fin y color.",
        "Crear un archivo de configuración que establezca la URI de la base de datos y habilite la creación automática de tablas al iniciar la aplicación.",
        "Implementar la lógica de inicialización del servidor Flask y registrar las rutas en un Blueprint dedicado a '/api/events'.",
        "Desarrollar el endpoint GET '/api/events' que reciba los parámetros 'start' y 'end', valide su formato ISO 8601, realice la consulta filtrada y devuelva la lista de eventos como JSON.",
        "Crear el endpoint POST '/api/events' que reciba un cuerpo JSON con los campos necesarios, valide la presencia de título, fechas y la coherencia de fecha_inicio < fecha_fin, cree una instancia del modelo Evento, guarde en la base y retorne el objeto creado.",
        "Implementar el endpoint PUT '/api/events/<id>' que busque el evento por id, actualice los atributos provistos en el cuerpo JSON (si existen), valide las fechas y guarde los cambios.",
        "Desarrollar el endpoint DELETE '/api/events/<id>' que elimine el registro correspondiente y retorne un mensaje de éxito.",
        "Añadir manejo global de errores para respuestas 400 (validación) y 404 (no encontrado).",
        "Configurar CORS para permitir peticiones desde la misma URL del frontend.",
        "Escribir pruebas unitarias con pytest que cubran los cuatro endpoints bajo diferentes escenarios de entrada.",
        "Preparar un script de migración ligera o usar Flask-Migrate para gestionar cambios futuros en el esquema."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo 'index.html' con una estructura básica: encabezado, contenedor principal y sección modal.",
        "Incluir enlaces a los recursos de la librería de calendario JavaScript elegida (por ejemplo FullCalendar) mediante CDN.",
        "Escribir CSS interno para estilos básicos del calendario, eventos y modal, asegurando responsividad mínima.",
        "Agregar un script inline que inicialice el calendario con la vista mensual, configurado para cargar eventos desde '/api/events' usando fetch con parámetros de fecha de inicio y fin correspondientes al mes actual.",
        "Implementar un listener en los días del calendario que abra un formulario dentro del modal para crear un nuevo evento, prellenando la fecha de inicio y fin según el día seleccionado.",
        "Añadir lógica JavaScript para enviar una petición POST a '/api/events' con los datos del formulario, refrescar el calendario al éxito y cerrar el modal.",
        "Configurar cada evento renderizado en el calendario como clickeable; al hacer click, abrir un modal que muestre título, descripción, fechas y un botón de eliminar.",
        "Implementar la llamada DELETE a '/api/events/<id>' cuando el usuario confirme la eliminación, actualizar el calendario sin recargar la página.",
        "Agregar funcionalidad drag‑and‑drop usando las opciones de la librería de calendario; al soltar un evento en otro día, capturar la nueva fecha y enviar una petición PUT a '/api/events/<id>' con fechas actualizadas.",
        "Incluir manejo básico de errores en todas las llamadas fetch para mostrar mensajes de alerta al usuario cuando la API devuelva un error.",
        "Optimizar el script para evitar múltiples instancias del calendario y asegurar que los datos se refresquen únicamente cuando haya cambios."
      ]
    }
  ]
}